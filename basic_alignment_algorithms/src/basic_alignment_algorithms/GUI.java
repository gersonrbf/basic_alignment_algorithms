/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basic_alignment_algorithms;

import java.awt.Color;
import java.security.KeyStore;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Gerson Romano Barbieri Filho
 */
public class GUI extends javax.swing.JFrame
{

    /**
     * Creates new form GUI
     */
    public GUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_alignmentTypeButtonGroup = new javax.swing.ButtonGroup();
        m_mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        alignmentTypePanel = new javax.swing.JPanel();
        m_globalAlignmentRadioButton = new javax.swing.JRadioButton();
        m_localAlignmentRadioButton = new javax.swing.JRadioButton();
        alignmentParameters = new javax.swing.JPanel();
        matchLabel = new javax.swing.JLabel();
        mismatchLabel = new javax.swing.JLabel();
        gapLabel = new javax.swing.JLabel();
        m_gapExtensionLabel = new javax.swing.JLabel();
        m_matchField = new javax.swing.JTextField();
        m_mismatchField = new javax.swing.JTextField();
        m_gapField = new javax.swing.JTextField();
        m_gapExtensionField = new javax.swing.JTextField();
        sequencesInputPanel = new javax.swing.JPanel();
        m_firstSequenceField = new javax.swing.JTextField();
        m_secondSequenceField = new javax.swing.JTextField();
        firstSeqLabel = new javax.swing.JLabel();
        secondSequenceLabel = new javax.swing.JLabel();
        matrixesPanel = new javax.swing.JPanel();
        scoreMatrixLabel = new javax.swing.JLabel();
        tracebackMatrixLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        m_scoreMatrixTable = m_scoreMatrixTable = new javax.swing.JTable(){
            @Override
            public Class<?> getColumnClass(int column) {
                return Integer.class;
            }
        };
        ;
        m_scoreMatrixTable.setDefaultRenderer(Integer.class, new CustomCellRenderer());
        jScrollPane3 = new javax.swing.JScrollPane();
        m_tracebackMatrixTable = m_tracebackMatrixTable = new javax.swing.JTable(){
            @Override
            public Class<?> getColumnClass(int column) {
                return Character.class;
            }
        };
        ;
        m_tracebackMatrixTable.setDefaultRenderer(Character.class, new CustomCellRenderer());
        m_calculateButton = new javax.swing.JButton();
        alignmentOutputPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        m_sequencesAlignmentTextArea = new javax.swing.JTextArea();
        sequencesAlignmentLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Basic Alignment Demonstration");

        alignmentTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Alignment Type"));

        m_alignmentTypeButtonGroup.add(m_globalAlignmentRadioButton);
        m_globalAlignmentRadioButton.setText("Global Alignment");

        m_alignmentTypeButtonGroup.add(m_localAlignmentRadioButton);
        m_localAlignmentRadioButton.setSelected(true);
        m_localAlignmentRadioButton.setText("Local Alignment");

        javax.swing.GroupLayout alignmentTypePanelLayout = new javax.swing.GroupLayout(alignmentTypePanel);
        alignmentTypePanel.setLayout(alignmentTypePanelLayout);
        alignmentTypePanelLayout.setHorizontalGroup(
            alignmentTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(alignmentTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_localAlignmentRadioButton)
                    .addComponent(m_globalAlignmentRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        alignmentTypePanelLayout.setVerticalGroup(
            alignmentTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(m_localAlignmentRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(m_globalAlignmentRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        alignmentParameters.setBorder(javax.swing.BorderFactory.createTitledBorder("Alignment Parameters"));

        matchLabel.setText("Match");

        mismatchLabel.setText("Mismatch");
        mismatchLabel.setToolTipText("");

        gapLabel.setText("Gap");

        m_gapExtensionLabel.setText("Gap Extension");

        m_gapField.setPreferredSize(new java.awt.Dimension(70, 19));

        javax.swing.GroupLayout alignmentParametersLayout = new javax.swing.GroupLayout(alignmentParameters);
        alignmentParameters.setLayout(alignmentParametersLayout);
        alignmentParametersLayout.setHorizontalGroup(
            alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mismatchLabel)
                    .addComponent(matchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(m_matchField, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(m_mismatchField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, alignmentParametersLayout.createSequentialGroup()
                        .addComponent(gapLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_gapField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, alignmentParametersLayout.createSequentialGroup()
                        .addComponent(m_gapExtensionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m_gapExtensionField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        alignmentParametersLayout.setVerticalGroup(
            alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, alignmentParametersLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(alignmentParametersLayout.createSequentialGroup()
                        .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_gapField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gapLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_gapExtensionLabel)
                            .addComponent(m_gapExtensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(alignmentParametersLayout.createSequentialGroup()
                        .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(matchLabel)
                            .addComponent(m_matchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(alignmentParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_mismatchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mismatchLabel))))
                .addGap(62, 62, 62))
        );

        sequencesInputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequences Input"));

        firstSeqLabel.setText("First Sequence");

        secondSequenceLabel.setText("Second Sequence");

        javax.swing.GroupLayout sequencesInputPanelLayout = new javax.swing.GroupLayout(sequencesInputPanel);
        sequencesInputPanel.setLayout(sequencesInputPanelLayout);
        sequencesInputPanelLayout.setHorizontalGroup(
            sequencesInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sequencesInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sequencesInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(secondSequenceLabel)
                    .addComponent(firstSeqLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sequencesInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_firstSequenceField, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(m_secondSequenceField))
                .addContainerGap())
        );
        sequencesInputPanelLayout.setVerticalGroup(
            sequencesInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sequencesInputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sequencesInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstSeqLabel)
                    .addComponent(m_firstSequenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sequencesInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondSequenceLabel)
                    .addComponent(m_secondSequenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matrixesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrixes Output"));

        scoreMatrixLabel.setText("Score Matrix");

        tracebackMatrixLabel.setText("Traceback Matrix");

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        m_scoreMatrixTable.setModel(new DefaultTableModel(0,0));
        m_scoreMatrixTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        m_scoreMatrixTable.setMaximumSize(new java.awt.Dimension(32767, 32767));
        m_scoreMatrixTable.setTableHeader(null);
        jScrollPane2.setViewportView(m_scoreMatrixTable);

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        m_tracebackMatrixTable.setModel(new DefaultTableModel(0,0));
        m_tracebackMatrixTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        m_tracebackMatrixTable.setTableHeader(null);
        jScrollPane3.setViewportView(m_tracebackMatrixTable);

        javax.swing.GroupLayout matrixesPanelLayout = new javax.swing.GroupLayout(matrixesPanel);
        matrixesPanel.setLayout(matrixesPanelLayout);
        matrixesPanelLayout.setHorizontalGroup(
            matrixesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrixesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreMatrixLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(matrixesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tracebackMatrixLabel))
                .addContainerGap())
        );
        matrixesPanelLayout.setVerticalGroup(
            matrixesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, matrixesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(matrixesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreMatrixLabel)
                    .addComponent(tracebackMatrixLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(matrixesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        m_calculateButton.setText("Calculate");
        m_calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_calculateButtonActionPerformed(evt);
            }
        });

        alignmentOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Alignment Output"));

        m_sequencesAlignmentTextArea.setColumns(20);
        m_sequencesAlignmentTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        m_sequencesAlignmentTextArea.setRows(2);
        jScrollPane4.setViewportView(m_sequencesAlignmentTextArea);

        sequencesAlignmentLabel.setText("Sequences Alignment");

        javax.swing.GroupLayout alignmentOutputPanelLayout = new javax.swing.GroupLayout(alignmentOutputPanel);
        alignmentOutputPanel.setLayout(alignmentOutputPanelLayout);
        alignmentOutputPanelLayout.setHorizontalGroup(
            alignmentOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(alignmentOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sequencesAlignmentLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        alignmentOutputPanelLayout.setVerticalGroup(
            alignmentOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sequencesAlignmentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(sequencesInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alignmentParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alignmentTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(alignmentOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_calculateButton)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(alignmentParameters, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(sequencesInputPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alignmentTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matrixesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(m_calculateButton)
                    .addComponent(alignmentOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        m_mainScrollPane.setViewportView(mainPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(m_mainScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(m_mainScrollPane)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void m_calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_calculateButtonActionPerformed
        
        String firstSequence = "AATCGCCAATT";
        String secondSequence = "ATCCCAAT";
        int match = 1;
        int mismatch = -1;
        int gap = -1;
        int gapExtension = 0;
        EAlignmentType alignmentType = EAlignmentType.None;
        ArrayList<Tuple<Integer,Integer>> path = new ArrayList();
        
        alignmentType = getAlignmentTypeFromGUI();
        
        AlignmentManager alignmentManager = new AlignmentManager();
        SubstitutionMatrix subMatrix = alignmentManager.executeAlignment(firstSequence,secondSequence,match,mismatch,gap,gapExtension,alignmentType);
        path = alignmentManager.getPath();
        char[][] alignment = alignmentManager.getAlignment();
        
        printSubstitutionMatrix(subMatrix,path);
        printAlignment(alignment);
        
    }//GEN-LAST:event_m_calculateButtonActionPerformed

// <editor-fold defaultstate="collapsed" desc=" Input Handlers Methods ">
    private EAlignmentType getAlignmentTypeFromGUI()
    {
        if(m_localAlignmentRadioButton.isSelected())
            return EAlignmentType.Local;
        else if(m_globalAlignmentRadioButton.isSelected())
            return EAlignmentType.Global;
        else
            return EAlignmentType.None;
    }
// </editor-fold>

private void printSubstitutionMatrix(SubstitutionMatrix matrix, ArrayList<Tuple<Integer,Integer>> path)
{
        
        int tableCellWidth = 25;
    
        char[] firstSeq = matrix.getFirstSequenceArray();
        char[] secondSeq = matrix.getSecondSequenceArray();
        char[] tempSecondSeq = new char[secondSeq.length+1];
        int[][] score = matrix.getScoreMatrix();
        TracebackCharacter[][] traceback = matrix.getTracebackMatrix();
        int longestStringLengthScore = findLongestNumberSize(score, matrix.getNumberOfRows(), matrix.getNumberOfColumns());
        int longestStringLengthTraceback = 1;
        DefaultTableModel tm_scoreMatrixTable = (DefaultTableModel) m_scoreMatrixTable.getModel();
        DefaultTableModel tm_tracebackMatrixTable = (DefaultTableModel) m_tracebackMatrixTable.getModel();
        CustomCellRenderer ccr_score = (CustomCellRenderer) m_scoreMatrixTable.getDefaultRenderer(Integer.class);
        CustomCellRenderer ccr_traceback = (CustomCellRenderer) m_tracebackMatrixTable.getDefaultRenderer(Character.class);
        

        if(tm_scoreMatrixTable == null || tm_tracebackMatrixTable==null)
            throw new Error("Erro de implementação. O TableModel não é um DefaultTableModel.");
        else if(ccr_score==null || ccr_traceback==null)
            throw new Error("Erro de implementação. O DefaultRenderer não é um CustomCellRenderer");

        ccr_score.setMarkedCells(path);
        ccr_traceback.setMarkedCells(path);
        //tableCellWidth = tableCellWidth*longestStringLengthScore;
        
        tm_scoreMatrixTable.setRowCount(matrix.getNumberOfRows()+1);
        tm_scoreMatrixTable.setColumnCount(matrix.getNumberOfColumns()+1);
        tm_tracebackMatrixTable.setRowCount(matrix.getNumberOfRows()+1);
        tm_tracebackMatrixTable.setColumnCount(matrix.getNumberOfColumns()+1);
        
        TableColumnModel tcm_scoreMatrixTable = m_scoreMatrixTable.getColumnModel();
        TableColumnModel tcm_tracebackMatrixTable = m_tracebackMatrixTable.getColumnModel();
        m_scoreMatrixTable.setRowHeight(tableCellWidth);
        m_tracebackMatrixTable.setRowHeight(tableCellWidth);
        
        for(int i = 0; i<m_scoreMatrixTable.getColumnCount(); i++) 
        {
            TableColumn tc = tcm_scoreMatrixTable.getColumn(i);
            tc.setMinWidth(tableCellWidth);
            tc.setMaxWidth(tableCellWidth);            
        }        
        
        for(int i = 0; i<m_tracebackMatrixTable.getColumnCount(); i++) 
        {
            TableColumn tc = tcm_tracebackMatrixTable.getColumn(i);
            tc.setMinWidth(tableCellWidth);
            tc.setMaxWidth(tableCellWidth);            
        }        
        
        tempSecondSeq[0] = ' ';
        for (int i = 0; i < secondSeq.length; i++)
            tempSecondSeq[i+1] = secondSeq[i];
                
        longestStringLengthScore +=2;
        longestStringLengthTraceback +=2;
                        
        for (int i = 0; i < firstSeq.length; i++)
        {
            m_scoreMatrixTable.setValueAt(firstSeq[i], 0, i+2);
            m_tracebackMatrixTable.setValueAt(firstSeq[i], 0, i+2);
        }
        
        for (int i = 0; i < matrix.getNumberOfRows(); i++) 
        {
            m_scoreMatrixTable.setValueAt(tempSecondSeq[i], i+1, 0);
            m_tracebackMatrixTable.setValueAt(tempSecondSeq[i], i+1, 0);
            for(int j = 0; j < matrix.getNumberOfColumns();j++)
            {
                m_scoreMatrixTable.setValueAt(score[i][j], i+1, j+1);
                m_tracebackMatrixTable.setValueAt(traceback[i][j].getCharacterSymbol(), i+1, j+1);
                
                //if(path.contains(String.format("[%d,%d]",i,j)))
                //{
                //    printCell(String.format("%d", score[i][j]),longestStringLengthScore,scoreMatrixDocument,findNumberSize(score[i][j]),Color.RED);
                //}
            }
        }
    }    

    private void printCell(String value, int longestStringLength, Document document, int size, Color color)
    {        
        int emptySpace = longestStringLength - size;
        int leftSpace = (int) Math.floor(emptySpace/2.0);
        int rightSpace = emptySpace-leftSpace;

        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, color);
        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Monospaced");


        try {        
            for(int i = 0; i<leftSpace;i++)
                document.insertString(document.getLength()," ",aset);
            document.insertString(document.getLength(),value,aset);
            for(int i = 0; i<rightSpace;i++)
                document.insertString(document.getLength()," ",aset);
            } catch (BadLocationException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }        
    }
        
    private void printAlignment(char[][] alignment)
    {
        StringBuilder text = new StringBuilder();
        
        for(int i = 0; i<alignment.length-1;i++)
        {
            text.append(alignment[i]);
                text.append('\n');
        }
        text.append(alignment[alignment.length-1]);
        m_sequencesAlignmentTextArea.setText(text.toString());
    }
    
    private void printCell(String value, int longestStringLength, JTextArea builder, Color color)
    {
        int emptySpace = longestStringLength - value.length();
        int leftSpace = (int) Math.floor(emptySpace/2.0);
        int rightSpace = emptySpace-leftSpace;
        
        for(int i = 0; i<leftSpace;i++)
            builder.append(" ");
        builder.setCaretColor(color);
        builder.append(value);
        for(int i = 0; i<rightSpace;i++)
            builder.append(" ");
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel alignmentOutputPanel;
    private javax.swing.JPanel alignmentParameters;
    private javax.swing.JPanel alignmentTypePanel;
    private javax.swing.JLabel firstSeqLabel;
    private javax.swing.JLabel gapLabel;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.ButtonGroup m_alignmentTypeButtonGroup;
    private javax.swing.JButton m_calculateButton;
    private javax.swing.JTextField m_firstSequenceField;
    private javax.swing.JTextField m_gapExtensionField;
    private javax.swing.JLabel m_gapExtensionLabel;
    private javax.swing.JTextField m_gapField;
    private javax.swing.JRadioButton m_globalAlignmentRadioButton;
    private javax.swing.JRadioButton m_localAlignmentRadioButton;
    private javax.swing.JScrollPane m_mainScrollPane;
    private javax.swing.JTextField m_matchField;
    private javax.swing.JTextField m_mismatchField;
    private javax.swing.JTable m_scoreMatrixTable;
    private javax.swing.JTextField m_secondSequenceField;
    private javax.swing.JTextArea m_sequencesAlignmentTextArea;
    private javax.swing.JTable m_tracebackMatrixTable;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel matchLabel;
    private javax.swing.JPanel matrixesPanel;
    private javax.swing.JLabel mismatchLabel;
    private javax.swing.JLabel scoreMatrixLabel;
    private javax.swing.JLabel secondSequenceLabel;
    private javax.swing.JLabel sequencesAlignmentLabel;
    private javax.swing.JPanel sequencesInputPanel;
    private javax.swing.JLabel tracebackMatrixLabel;
    // End of variables declaration//GEN-END:variables

    private int findLongestNumberSize(int[][] matrix, int rows, int columns)
    {
        int biggestSize = 0;
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<columns;j++)
            {
                int number = matrix[i][j];
                int numberSize = findNumberSize(number);
                if(numberSize>biggestSize)
                    biggestSize = numberSize;
            }
        }
        return biggestSize;
    }

    private int findNumberSize(int number) {        
        if(number==0)
            return 1;
        else if(number<0)
            return (int)(Math.floor(Math.log10(Math.abs((double)number)))+1)+1;
        else
            return (int)(Math.floor(Math.log10(Math.abs((double)number)))+1);
    }
}
